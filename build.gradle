/*
    Copyright (C) 2018 RISCassembler

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/


import java.awt.Desktop
import java.nio.file.Files
import java.nio.file.LinkOption
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.time.LocalDateTime

group 'capslock'
version '1.0.0-SNAPSHOT'

apply plugin: 'java'
sourceCompatibility = 1.8
compileTestJava.enabled = false

apply plugin: 'groovy'
compileGroovy.enabled = false

apply plugin: 'application'
mainClassName = 'capslock.fixer.main.Main'
startScripts.enabled = false
distZip.enabled = false
distTar.enabled = false

apply plugin: 'com.github.johnrengelman.shadow'
startShadowScripts.enabled = false
shadowDistTar.enabled = false
shadowDistZip.enabled = false

repositories {
    mavenCentral()
    flatDir{
        dirs 'lib'
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

class PrivateLibDownload{
    private static final String GitHubRepository = 'https://github.com/chrootRISCassembler/dependence/raw/master/'
    String libName
    String libVersion
    String jarName(){libName + '-' + libVersion + '.jar'}
    def localJarPath(){Paths.get(System.getProperty("user.dir") + "/lib/" + jarName())}

    void downloadLibJar(){
        try {
            URL url = new URL(GitHubRepository + jarName())
            InputStream inStream = url.openStream()
            Files.copy(inStream, localJarPath(), StandardCopyOption.REPLACE_EXISTING)
            println "Download " + libName +  " succeeded"
        } catch (Exception ex) {
            println "Download " + libName + " failed"
            throw ex
        }
    }

    void downloadIfNotExist(){
        if(!Files.exists(localJarPath(), LinkOption.NOFOLLOW_LINKS))downloadLibJar()
    }
}

final fileChecker = new PrivateLibDownload()
fileChecker.libName = "FileChecker"
fileChecker.libVersion = "1.1.1-SNAPSHOT"

final trivialLogger = new PrivateLibDownload()
trivialLogger.libName = "TrivialLogger"
trivialLogger.libVersion = "1.1.1-SNAPSHOT"

final gameInfo = new PrivateLibDownload()
gameInfo.libName = 'game_info'
gameInfo.libVersion = '1.0.1-SNAPSHOT'

final tinyParser = new PrivateLibDownload()
tinyParser.libName = 'TinyParser'
tinyParser.libVersion = '1.0.0-SNAPSHOT'

dependencies {
    compile group: 'org.json', name: 'json', version:  '+'
    testCompile 'org.codehaus.groovy:groovy-all:2.3.11'

    compile name: fileChecker.libName, version: fileChecker.libVersion
    compile name: trivialLogger.libName, version: trivialLogger.libVersion
    compile name: gameInfo.libName, version: gameInfo.libVersion
    compile name: tinyParser.libName, version: tinyParser.libVersion
}

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

processResources{
    exclude '*.fxml'

    doLast {
        def buildInfoFile = new File(processResources.destinationDir.path + '/BuildInfo.txt')
        buildInfoFile.bytes = []
        buildInfoFile << 'version : ' + version + '\n'
        buildInfoFile << 'git_commit_hash : ' +  'git rev-parse HEAD'.execute().text.trim()  + '\n'
        buildInfoFile << 'date : ' + LocalDateTime.now()
    }
}

compileJava.doFirst {
    def libDir = Paths.get(System.getProperty("user.dir") + "/lib/")
    if (Files.notExists(libDir)) {
        Files.createDirectory(libDir)
    }

    fileChecker.downloadIfNotExist()
    trivialLogger.downloadIfNotExist()
    gameInfo.downloadIfNotExist()
    tinyParser.downloadIfNotExist()
}

task forceUpdateLib{
    doLast {
        println "force update library"

        def libDir = Paths.get(System.getProperty("user.dir") + "/lib/")
        if (Files.notExists(libDir)) {
            Files.createDirectory(libDir)
        }

        fileChecker.downloadLibJar()
        trivialLogger.downloadLibJar()
        gameInfo.downloadLibJar()
        tinyParser.downloadLibJar()
    }
}

task cpFXML(type: Copy){
    from 'src/main/resources'
    exclude 'icon.xcf'
    into 'build/classes/java/main/capslock/fixer/main'
}

run {
    tasks.cpFXML.execute()
}

javadoc {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
    options.links 'https://docs.oracle.com/javase/jp/8/docs/api/'
    options.links 'https://docs.oracle.com/javase/jp/8/javafx/api/'

    doLast{
        //デフォルトブラウザで生成したjavadocを自動で開く
        def userDir = System.getProperty("user.dir")
        def indexURI = new URI(userDir.replace('\\', '/') + "/build/docs/javadoc/index.html")
        Desktop.getDesktop().browse(indexURI)
    }
}